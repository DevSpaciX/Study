import asyncio
import datetime
import logging
import datetime
from io import BytesIO

import aiogram
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.utils import executor
from asgiref.sync import sync_to_async
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram import types
from aiogram.types import BotCommand
from course.models import Employee
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher.filters.state import State, StatesGroup

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
bot = Bot(token='6117198025:AAHGvfq32khYqQ_29fgBZxVQXv0WsNYfsfc')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

k = Employee.objects.count()


class RegistrationState(StatesGroup):
    WaitingForEmail = State()


async def setup_bot_commands(dp):
    commands = [
        types.BotCommand(command="/start", description="Start the bot"),
        types.BotCommand(command="/login", description="Login"),
    ]
    await bot.set_my_commands(commands)


@dp.message_handler(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –≤–æ–π—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /login")


@dp.message_handler(Command("login"))
async def cmd_login(message: types.Message, state: FSMContext):
    await RegistrationState.WaitingForEmail.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π email:")


@dp.message_handler(state=RegistrationState.WaitingForEmail)
async def process_email(message: types.Message, state: FSMContext):
    user_email = message.text

    try:
        user = await sync_to_async(Employee.objects.get)(name=user_email)
        await message.answer(f"–í—ã –ø—Ä–æ—à–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å email: {user_email}")
        await state.finish()

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥
        commands = [
            types.BotCommand(command="/new_command1", description="New Command 1"),
            types.BotCommand(command="/new_command2", description="New Command 2"),
        ]
        await bot.set_my_commands(commands)

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –Ω–æ–≤—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
        await start(message)
    except Employee.DoesNotExist:
        await message.answer("–ü–æ—Ö–æ–∂–µ, —Ç–µ–±—è –Ω–µ—Ç –≤ –±–∞–∑–µ, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑")


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button_start_work = types.KeyboardButton("–ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É üöÄ", callback_data='button_start_work')
    button_start_lunch = types.KeyboardButton("–û–±—ñ–¥ üçî", callback_data='button_start_lunch')
    button_watch_stat = types.KeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä", callback_data='button_watch_stat')
    button_learn = types.KeyboardButton("–ë–∞–∑–∞ –∑–Ω–∞–Ω—å üß†", callback_data='button_learn')
    keyboard.add(button_start_work, button_start_lunch, button_watch_stat, button_learn)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)


@dp.message_handler(text="–ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É üöÄ")
async def create_employee(message: types.Message):
    time = datetime.datetime.now().strftime("%H:%M:%S")
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSMContext –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–º–µ–Ω–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    await message.answer(f"–†–∞–±–æ—Ç–∞ –Ω–∞—á–∞–ª–∞—Å—å –≤ {time} ")


@dp.message_handler(text="–û–±—ñ–¥ üçî")
async def lunch_menu(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button_food1 = types.KeyboardButton("–ï–¥–∞ 1")
    button_food2 = types.KeyboardButton("–ï–¥–∞ 2")
    button_return = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    keyboard.add(button_food1, button_food2, button_return)

    await bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –µ–¥—É:", reply_markup=keyboard)


@dp.message_handler(text="–ë–∞–∑–∞ –∑–Ω–∞–Ω—å üß†")
async def learn_menu(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button_failed_online = types.KeyboardButton("Failed_online ‚ö†Ô∏è")
    button_date_error = types.KeyboardButton("–ö–∞—Å–∏—Ä üíÄ")
    button_return = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚ùå")
    keyboard.add(button_failed_online, button_date_error, button_return)

    await bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –æ—à–∏–±–∫—É –∫–æ—Ç–æ—Ä–∞—è —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:", reply_markup=keyboard)


@dp.message_handler(text="–ö–∞—Å–∏—Ä üíÄ")
async def cashier_errors(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button_return = types.KeyboardButton("–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ø–∏—Ç–∞–Ω—å ‚ùå")
    keyboard.add(button_return)
    photo_url = "https://i.imgur.com/4u9s0zS.png"
    response = requests.get(photo_url)
    photo = BytesIO(response.content)
    await bot.send_photo(message.chat.id, photo, reply_markup=keyboard)


@dp.message_handler(text="Failed_online ‚ö†Ô∏è")
async def failed_online(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button_return = types.KeyboardButton("–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ø–∏—Ç–∞–Ω—å ‚ùå")
    keyboard.add(button_return)
    photo_url = "https://i.imgur.com/ZxGpxNG.png"
    response = requests.get(photo_url)
    photo = BytesIO(response.content)
    await bot.send_photo(message.chat.id, photo, reply_markup=keyboard)


@dp.message_handler(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚ùå")
async def return_to_main_menu(message: types.Message):
    await start(message)


@dp.message_handler(text="–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ø–∏—Ç–∞–Ω—å ‚ùå")
async def return_to_learn_menu(message: types.Message):
    await learn_menu(message)

def run_bot():
    logging.basicConfig(level=logging.INFO)
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    executor.start_polling(dp, skip_updates=True, on_startup=setup_bot_commands)


run_bot()
